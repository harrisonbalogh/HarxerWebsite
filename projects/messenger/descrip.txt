&nbsp&nbsp This desktop application contains both a java server and client for a simple computer chat. The user interface allows for easy starting and stopping of the server on the given IP address. The port may be changed but a commonly unused port is chosen by default. The client side of this software’s functionality allows the user to enter an IP address to connect to a live server (users with a server running may connect to themselves).<br><br>
&nbsp&nbsp This project served as practice for Java’s network Socket classes. Previous projects that were similar to this software were merely locally accessible on the same network.<br><br>
&nbsp&nbsp Messenger is also an attempt at network protocols. Clients are warned of outdated protocol matching with connected server. This disclaimer meant a client could either misinterpret the information it was receiving from the server or send unreadable information to the server. This potentially could crash the server but I would have to look into this more. In its latest iteration, no checks stood in place to prevent crashing when attempting to parse information from client to server or vice versa. This likely means crashing is likely to occur on both sides when using outdated versions of the software to connect to each other.<br><br>
&nbsp&nbsp Minor note: This software is the first time I have used computer type detection. Allowing the software to append, for example, “Windows 10” to the username when a user sent a message to the client. Messenger is also the first Java application where I’ve deployed shutdown hooks - to run processes before the application quits. This allowed the server to send out a shutdown message to all connected clients when being quit before stopping the server. Lastly, I wrote my own I/O buffers for the flow of messages from client to server. This required thread locking and notifying when listening or transmitting, respectively. 