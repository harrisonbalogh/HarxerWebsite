&nbsp&nbsp This project is a fork of the <a href="javascript:jumpToProject('javaPhysics')()">2D Template Environment</a> for a typical helicopter arcade game. Holding the ‘up’ button down makes the helicopter fly up while having the ‘up’ button released makes the helicopter float down. This project is focused primarily on optimization and the template environment project. <br><br>
&nbsp&nbsp The only noteworthy content of this game is the cave generation. The user must fly their helicopter through a dynamically generated cave that is different in every play through. This, of course, means there is some usage of a random number generator. The cave is produced by a sequence of many thin rectangles, all with their own hitboxes to detect the helicopter crashing. I realized in developing this project that randomly increasing or decreasing the height of the next rectangle being spawned, as the character flies along, created a very chaotic looking cave. So this project randomly increases or decreases the delta height, or height acceleration, of rectangles being spawned. This means changes would be gradual and wouldn’t spike from rectangle to rectangle. The end result was an almost randomly oscillating depth cave tunnel. <br><br>
&nbsp&nbsp Future iterations of this project would be implementing a loading screen, if necessary. A lot of processing occurs real time as the game is played. And while this project is already a fairly optimized graphical game, a lot of CPU power could be saved by pre-generating the game stage. Hence a loading screen may show up to point out the game was generating all rectangles. <br><br>
&nbsp&nbsp There perhaps may also be a more efficient hitbox system to implement into this project. It currently uses the Rectangle class in the common Java library AWT. Since the game must iterate through all rectangles and check for intersection with the helicopter on every redraw, there may be a way to form a few larger rectangles for intersection checking. This may mean having less precision than the current implementation but may save on real time processing which, as said, was a primary focus for this project. 